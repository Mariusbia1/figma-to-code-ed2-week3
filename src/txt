// Fonction pour formater les nombres avec des séparateurs de milliers
function formatNumber(num) {
  return num.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
}

// Fonction pour récupérer les données de l'API CoinGecko
async function fetchCryptoData() {
  try {
    const response = await fetch(
      'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=false'
    );
    const data = await response.json();

    // Sélectionne le corps du tableau
    const tableBody = document.getElementById('crypto-table-body');

    // Efface les anciennes données (si besoin)
    tableBody.innerHTML = '';

    // Parcourt les données et les injecte dans le tableau
    data.forEach((coin, index) => {
      const row = `
        <tr class="border-b">
          <td>&#9734;</td>
          <td>${index + 1}</td>
          <td class="flex items-center space-x-2">
            <img src="${coin.image}" alt="${coin.name} logo" class="w-5 h-5">
            <span>${coin.name} - ${coin.symbol.toUpperCase()}</span>
          </td>
          <td>${formatNumber(coin.current_price)}</td>
          <td class="${coin.price_change_percentage_24h < 0 ? 'text-red-500' : 'text-green-500'}">
            ${coin.price_change_percentage_24h.toFixed(2)}%
          </td>
          <td>${formatNumber(coin.total_volume)}</td>
          <td>${formatNumber(coin.market_cap)}</td>
          <td>à faire</td>
        </tr>
      `;

      // Ajoute la nouvelle ligne au tableau
      tableBody.insertAdjacentHTML('beforeend', row);
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des données:', error);
  }
}

// Appelle la fonction pour charger les données
fetchCryptoData();




function formatNumber(num) {
  return num.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
}

// Fonction pour créer un petit graphe pour les 7 derniers jours
function createSparkline(data, ctx) {
  new Chart(ctx, {
    type: 'line',
    data: {
      labels: data.map((_, index) => `Day ${index + 1}`),
      datasets: [
        {
          data: data,
          borderColor: 'green', // Couleur de la ligne
          backgroundColor: 'white', // Fond transparent
          fill: true,
          tension: 0.4, // Lissage de la ligne
        },
      ],
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        x: { display: false },
        y: { display: false },
      },
      elements: { point: { radius: 0 } }, // Supprime les points
      plugins: { legend: { display: false } }, // Cache la légende
    },
  });
}

// Fonction pour récupérer les données de l'API CoinGecko
async function fetchCryptoData() {
  try {
    const response = await fetch(
      'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=true'
    );
    const data = await response.json();

    // Sélectionne le corps du tableau
    const tableBody = document.getElementById('crypto-table-body');

    // Efface les anciennes données (si besoin)
    tableBody.innerHTML = '';

    // Parcourt les données et les injecte dans le tableau
    data.forEach((coin, index) => {
      const row = document.createElement('tr');
      row.classList.add('border-b');

      row.innerHTML = `
        <td>&#9734;</td>
        <td>${index + 1}</td>
        <td class="flex items-center space-x-2">
          <img src="${coin.image}" alt="${coin.name} logo" class="w-5 h-5">
          <span>${coin.name} - ${coin.symbol.toUpperCase()}</span>
        </td>
        <td>${formatNumber(coin.current_price)}</td>
        <td class="${coin.price_change_percentage_24h < 0 ? 'text-red-500' : 'text-green-500'}">
          ${coin.price_change_percentage_24h.toFixed(2)}%
        </td>
        <td>${formatNumber(coin.total_volume)}</td>
        <td>${formatNumber(coin.market_cap)}</td>
        <td><canvas id="sparkline-${index}" class="w-24 h-10"></canvas></td>
      `;

      tableBody.appendChild(row);

      // Génère le petit graphe pour chaque crypto
      const ctx = document.getElementById(`sparkline-${index}`).getContext('2d');
      createSparkline(coin.sparkline_in_7d.price, ctx);
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des données:', error);
  }
}

// Appelle la fonction pour charger les données
fetchCryptoData();
